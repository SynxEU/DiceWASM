@using Dice.Model
@using Dice.Pages.Helpers
@inject ISessionStorage SessionStorage
@if (numberOfSides != 0)
{
    <RadzenStack Orientation="Orientation.Vertical" gap="1rem" JustifyContent="JustifyContent.Center">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Style="width: 7rem" ButtonStyle="ButtonStyle.Success" Icon="poker_chip" Size="ButtonSize.Medium" Click="@ThrowDice"/>
            <RadzenNumeric ShowUpDown="false" @bind-Value=@numberOfSides Max="20" Min="4"/>
        </RadzenStack>
        @if (lastValue == 0)
        {
            <strong>Throw a dice</strong>
        }
        else
        {
            <strong>Eyes: @lastValue ðŸŽ²</strong>
        }
    </RadzenStack>
}
else
{
    <RadzenStack Orientation="Orientation.Vertical" gap="1rem" JustifyContent="JustifyContent.Center">
        <RadzenNumeric ShowUpDown="false" @bind-Value=@numberOfSides Max="20" Min="4"/>
    </RadzenStack>
}

@code {
    private int numberOfSides;
    private static int currentId = 1;
    private int lastValue;

    [Parameter] public EventCallback<DiceModel> SaveThrowCallback { get; set; }
    
    async Task ThrowDice()
    {
        Random random = new();
        int value = random.Next(1, (numberOfSides + 1));
        lastValue = value;
        StateHasChanged();

        var model = new DiceModel
        {
            Id = ++currentId,
            Value = value,
            Date = DateOnly.FromDateTime(DateTime.UtcNow),
            Time = DateTime.UtcNow.TimeOfDay
        };

        await SessionStorage.SetItemAsync("last_throw", model);
        await SaveThrowCallback.InvokeAsync(model);
    }

}